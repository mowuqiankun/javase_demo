package com.zlk.com;


/**
 * @ zlk
 * @ 2020/3/3 11:07
 * java 基础知识，详见注释。
 */
public class Dem01_HelloWorld {
//    程序执行的起点
    public static void main(String[] args) {
        System.out.println("HelloWorld!");
        System.out.println(true);
        System.out.println(false);
        System.out.println('1'+0);  //底层保留为二进制
        System.out.println('中'+0);
    }
}


/*一：关键字

1）完全小写纯英文字母：
 */

/*
* 二：标识符命名规范
*
* 类名规范：首字母大写，后面每个单词首字母大写（大驼峰写法）
* 变量名、方法名规范：首字母小写，后面每个单词字母大写（小驼峰写法）
*
*/

/*
* 三：常量
*
* 1）字符串常量；字符串。
* 2）整数常量：数字，没有小数点； 如：100、50；
* 3）浮点数常量：直接写上的数字，有小数点。如：2.5、-3.14、0.0；
* 4）字符常量：单引号引起来的单个字符，如：'A'、'a'、''中
* 5）布尔常量：只有两种取值；true、false。
* 6）空常量：null；代表没有任务数据
*
* */

/*
* 四：数据类型
* 1）基本数据类型:（四类八项）
*    整数型：byte 1字节 -128-127范围、short 2字节、int 4字节、long 8字节  如：100L;
*    浮点型:单精度 float 4字节、双精度 double 8字节；（）
*    字符型： char 2个字节；
*    布尔型； true、false 1个字节 ;
*
* 2)引用类型
*    字符串
*     数组
*     类
*     接口
*     lambda
*
* 注意：
*   数据范围与字节数不一定相关，float比long更广泛。
*   浮点数默认类型为double，整数默认为int
* */

/*
* 五：数据类型转换（数据类型不一样时）
* 1)自动转换：隐式。数据范围从小到大（与字节数不相关）。如：int-->long。
* 2）强制转换：显式。范围小的变量名=（范围小的类型）原本范围大的数据。
*
* 注意事项：
*  强制数据转换一般不推荐使用，可能发生精度损失，数据溢出。
*  char/short/char都可以发生数字运算，如加法“+”；都是保留为二进制，自然可以运算。
*  char/short/char首先都会被提升为int型，再进行运算；如 int a= byte b+byte c;  如果a转为byte，报错。
* boolean 不能发生任何数据转换。
* */

/*
六：数字和字符的对照关系表(编码表)
ASCII码表：美国信息交换标准代码； 开头0-127，包含美国的所以字符和数字。
Unicode码表：万国表。0-127和ASCII码表完全一样，从128开始，含有更多字符。
* */


/*
* 七：运算符
  1）四则运算
        加 +：对于数值来说，是加法；对于字符char类型来说，再计算前，会提升为int，再计算；对于字符串，代表连接符号。
        减 - ：
        乘 * ：
        除 / 整除，如：3/2 为1,。
  2）取模（取余数） %
  3）自增运算符：++；自减运算符：--。
  4）赋值运算符
       +=  ;a+=3  相当于a=a+3;
       -=
       /=
       %=
  5)比较运算符（结果 boolean常量）
      ==
      <
      >
      <=
      >=
      !=
  6）与 && ； 或 || ；非 ! 。 （结果 boolean常量）
  7）一元运算符：只需要一个数字就可以操作的运算符。如:取反，自增，自减等。
  *  二元运算符：需要两个数据才可以进行操作的运算符，如 +=，-=等。
  * 三元运算符：需要三个数据才可以进行操作的运算符。  变量名称=条件判断？表达式A:表达式B；

  注意事项：
  * 运算中有不同的数据类型，结果将是数据类型范围大的那种。
  * 任何数据类型与字符串进行连接，都会变为字符串。
  * 单独使用自增，++ a与 a++ 无区别；混合使用时，++a ,变量立马+1，然后拿着结果运算。a++,首先使用变量原本值，然后再让变量+1；
  * && 、||具有短路效果：如果左边已经判断得到最终结果，右边代码不再执行，节省一定性能。
* */
